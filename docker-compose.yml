version: '3'

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.6-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ecom-rabbit-ts-network

  auth-db:
    container_name: auth-db
    image: mongo
    ports:
      - "27020:27017"
    volumes:
      - auth-data:/data/db
    networks:
      - ecom-rabbit-ts-network

  auth-service:
    container_name: auth-service
    build:
      context: ./services/authService
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - MONGO_URI=mongodb://auth-db:27017/ecom-rabbit-ts
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecom-rabbit-ts-network

  user-db:
    container_name: user-db
    image: mongo
    ports:
      - "27021:27017"
    volumes:
      - user-data:/data/db
    networks:
      - ecom-rabbit-ts-network

  user-service:
    container_name: user-service
    build:
      context: ./services/userService
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - PORT=3000
      - MONGO_URI=mongodb://user-db:27017/ecom-rabbit-ts
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecom-rabbit-ts-network

  product-db:
    container_name: product-db
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - product-data:/data/db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ecom-rabbit-ts
    networks:
      - ecom-rabbit-ts-network

  product-service:
    container_name: product-service
    build:
      context: ./services/productService
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - PORT=3000
      - DATABASE_URI=postgres://postgres:postgres@postgres:5432/ecom-rabbit-ts
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecom-rabbit-ts-network

  cart-db:
    container_name: cart-db
    image: mongo
    ports:
      - "27023:27017"
    volumes:
      - cart-data:/data/db
    networks:
      - ecom-rabbit-ts-network

  cart-service:
    container_name: cart-service
    build:
      context: ./services/cartService
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    environment:
      - PORT=3000
      - MONGO_URI=mongodb://cart-db:27017/ecom-rabbit-ts
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecom-rabbit-ts-network      

  order-db:
    container_name: order-db
    image: mongo
    ports:
      - "27024:27017"
    volumes:
      - order-data:/data/db
    networks:
      - ecom-rabbit-ts-network

  order-service:
    container_name: order-service
    build:
      context: ./services/orderService
      dockerfile: Dockerfile
    ports:
      - "3004:3000"
    environment:
      - PORT=3000
      - MONGO_URI=mongodb://order-db:27017/ecom-rabbit-ts
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecom-rabbit-ts-network  


volumes:
  auth-data:
  user-data:
  product-data:
  cart-data:
  order-data:


networks:
  ecom-rabbit-ts-network:
    driver: bridge
    ipam:
      config:
        - subnet: "192.168.0.0/24"